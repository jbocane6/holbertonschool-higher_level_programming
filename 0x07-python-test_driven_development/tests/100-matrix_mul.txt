===========================
 ``100-matrix_mul`` test
===========================

Next, we're gonna test the function ``matrix_mul``.

Import
======

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Integers and floats
==================

``matrix_mul()`` Function that multiplies 2 matrices.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[7, 10], [15, 22]]

    >>> matrix_a = [
    ...    [1, 2]
    ... ]
    >>> matrix_b = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[13, 16]]

    >>> matrix_a = [
    ...    [1, 2.5],
    ...    [3.5, 4]
    ... ]
    >>> matrix_b = [
    ...    [5, 6.5],
    ...    [7.5, 8]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[23.75, 26.5], [47.5, 54.75]]

All ‘rows’ should be of the same size).

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

A rows will be equal to the B columns

::

    >>> matrix_a = [
    ...    [1, 2, 3],
    ...    [4, 5, 6],
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied
    
    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2, 3]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

Both matrices couldn't be empty.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [5, 6],
    ...    [7, 8]
    ... ]
    >>> matrix_mul([[]], matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul(matrix_a, [[]])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

In ``matrix_mul`` must be lists of lists of integers or floats.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4j]
    ... ]
    >>> matrix_b = [
    ...    [5, 6],
    ...    [7, 8]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [5, "Holberton"],
    ...    [7, 8]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [{3, 4}, 5]
    ... ]
    >>> matrix_b = [
    ...    [6, 7],
    ...    [8, 9]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_a = [
    ...    [[1, 2], 3],
    ...    [4, 5]
    ... ]
    >>> matrix_b = [
    ...    [6, 7],
    ...    [8, 9]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [5, 6],
    ...    [("Holberton", "School"), 8]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [5, 6],
    ...    [7, 8]
    ... ]
    >>> matrix_mul(matrix_a, None)
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

    >>> matrix_mul("Holberton", matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul(["School", 123], matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul(matrix_a, [(1, 2, 3), float('inf')])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

Miscelaneous
============

We have to input the correct number of arguments.

::

    >>> matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

    >>> matrix_mul(matrix_a)
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

    >>> matrix_mul(float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Documentation and style
=======================

Looking for correct documentation.

::

    >>> len(__import__("100-matrix_mul").__doc__) > 8
    True

    >>> len(__import__("100-matrix_mul").matrix_mul.__doc__) > 8
    True

Looking for correct pep8 style.

::

    >>> import os
    >>> os.system("pep8 100-matrix_mul.py")
    0

Checking shebang.
The shebang line in any script determines the script's ability 
to be executed like a standalone executable without typing python 
beforehand in the terminal or when double clicking it in a file manager 
(when configured properly).

::

    >>> os.popen('head -1 100-matrix_mul.py').read()
    '#!/usr/bin/python3\n'

Looking for the correct tests file path.

::

    >>> os.popen('ls tests/100-matrix_mul.txt').read()
    'tests/100-matrix_mul.txt\n'

Checking if there is a newline at end of module.

::

    >>> os.popen('tail -1 100-matrix_mul.py | cat -e').read()[-1]
    '\n'
