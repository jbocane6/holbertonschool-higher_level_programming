===========================
 ``4-print_square`` test
===========================

Next, we're gonna test the function ``print_square``.

Import
======

>>> print_square = __import__('4-print_square').print_square

Numbers
=======

``print_square()`` prints a square with the character #.

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

    >>> print_square(0)
    

    >>> print_square(1)
    #

If size is less than 0, raise a ValueError exception.

::

    >>> print_square(-1)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

Non-Integers
============

In ``print_square`` size must be an integer.

::

    >>> print_square(25.03)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(-25.03)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square("Holberton")
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(None)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square((2, 5, 3))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square({2, 5, 3})
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square([2, 5, 3])
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square([[]])
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(float('inf'))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

Miscelaneous
============

We have to input the correct number of arguments.

::

    >>> print_square()
    Traceback (most recent call last):
        ...
    TypeError: print_square() missing 1 required positional argument: 'size'

Documentation and style
=======================

Looking for correct documentation.

::

    >>> len(__import__("4-print_square").__doc__) > 8
    True

    >>> len(__import__("4-print_square").print_square.__doc__) > 8
    True

Looking for correct pep8 style.

::

    >>> import os
    >>> os.system("pep8 4-print_square.py")
    0

Checking shebang.
The shebang line in any script determines the script's ability 
to be executed like a standalone executable without typing python 
beforehand in the terminal or when double clicking it in a file manager 
(when configured properly).

::

    >>> os.popen('head -1 4-print_square.py').read()
    '#!/usr/bin/python3\n'

Looking for the correct tests file path.

::

    >>> os.popen('ls tests/4-print_square.txt').read()
    'tests/4-print_square.txt\n'

Checking if there is a newline at end of module.

::

    >>> os.popen('tail -1 4-print_square.py | cat -e').read()[-1]
    '\n'
